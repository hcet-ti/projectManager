<?xml version="1.0" encoding="UTF-8"?>
<root xmlns:nsd="https://structorizer.fisch.lu" version="3.28-12" preRepeat="until " postFor="to" preReturn="return" postForIn="in" preWhile="while" output="OUTPUT" input="INPUT" preFor="for" preExit="exit" preLeave="leave" ignoreCase="true" preForIn="foreach" stepFor="step " author="Kay Gürtzig" created="2018-12-14" changedby="Kay Gürtzig" changed="2018-12-17" origin="Structorizer 3.28-12 / COBOLParser: &#34;D:\SW-Produkte\Structorizer\tests\Issue631_COBOL_preprocessor\DemoINSPECT.cob&#34;" licenseName="GPLv3-link" license="GNU General Public License (V 3)&#10;https://www.gnu.org/licenses/gpl.html&#10;http://www.gnu.de/documents/gpl.de.html&#10;" text="&#34;string INSPECT_CONVERTING(target, subjects, replacements, after, before)&#34;" comment="&#34;This routine simulates an INSPECT CONVERTING statement of COBOL.&#34;,&#34;Argument target is the string to be manipulated (ought to be a variable).&#34;,&#34;The argument strings subjects, replacements, after, and before mean:&#34;,&#34;subjects - an ordered set of characters to be replaced;&#34;,&#34;replacements - a corresponding sequence of replacing characters (should be of same length as subjects!)&#34;,&#34;after - the trigger substring starting the region (or &#34;&#34;&#34;&#34; if none);&#34;,&#34;before - the trigger substring terminating the region (or &#34;&#34;&#34;&#34; if none).&#34;,&#34;Thus, the arguments represent a CONVERTING clause like:&#34;,&#34;subjects TO replacements AFTER INITIAL after BEFORE INITIAL before&#34;" color="ffffff" type="sub" style="nice">
	<children>
		<instruction text="&#34;n &#60;- length(subjects)&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
		<instruction text="&#34;len &#60;- length(target)&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
		<instruction text="&#34;start &#60;- pos(after, target)&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
		<alternative text="&#34;start &#60; 1&#34;" comment="&#34;&#34;" color="ffffff" disabled="0">
			<qTrue>
				<instruction text="&#34;start &#60;- len + 1&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
			</qTrue>
			<qFalse>
				<instruction text="&#34;inc(start, length(after))&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
			</qFalse>
		</alternative>
		<instruction text="&#34;end &#60;- pos(before, target)&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
		<instruction text="&#34;result &#60;- copy(target, 1, start-1)&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
		<alternative text="&#34;(before = &#34;&#34;&#34;&#34;) or (end &#60; 1)&#34;" comment="&#34;&#34;" color="ffffff" disabled="0">
			<qTrue>
				<instruction text="&#34;end &#60;- len + 1&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
			</qTrue>
			<qFalse color="ffffff">
			</qFalse>
		</alternative>
		<instruction text="&#34;i &#60;- start&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
		<for text="&#34;for i &#60;- start to end-1&#34;" comment="&#34;&#34;" counterVar="i" startValue="start" endValue="end-1" stepConst="1" style="COUNTER" color="ffffff" disabled="0">
			<qFor>
				<instruction text="&#34;ch &#60;- copy(target, i, 1)&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
				<instruction text="&#34;found &#60;- pos(ch, subjects)&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
				<alternative text="&#34;found &#62; 0&#34;" comment="" color="ffffff" disabled="0">
					<qTrue>
						<alternative text="&#34;found &#62; length(replacements)&#34;" comment="" color="ffffff" disabled="0">
							<qTrue>
								<instruction text="&#34;ch &#60;- ' '&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
							</qTrue>
							<qFalse>
								<instruction text="&#34;ch &#60;- copy(replacements, found, 1)&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
							</qFalse>
						</alternative>
					</qTrue>
					<qFalse color="ffffff">
					</qFalse>
				</alternative>
				<instruction text="&#34;result &#60;- result + ch&#34;" comment="&#34;Append the original or replaced character&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
			</qFor>
		</for>
		<alternative text="&#34;end &#60;= len&#34;" comment="&#34;&#34;" color="ffffff" disabled="0">
			<qTrue>
				<instruction text="&#34;result &#60;- result + copy(target, end, len-end+1)&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
			</qTrue>
			<qFalse color="ffffff">
			</qFalse>
		</alternative>
	</children>
</root>