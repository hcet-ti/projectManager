// Generated by Structorizer 3.32-01 

// Copyright (C) 2020-03-21 Kay GÃ¼rtzig 
// License: GPLv3-link 
// GNU General Public License (V 3) 
// https://www.gnu.org/licenses/gpl.html 
// http://www.gnu.de/documents/gpl.de.html 

#include <string>
#include <iostream>
using std::string;

// function readNumbers(fileName: string; numbers: array of integer; maxNumbers: integer): integer 

// Tries to read as many integer values as possible upto maxNumbers 
// from file fileName into the given array numbers. 
// Returns the number of the actually read numbers. May cause an exception. 
// TODO: Revise the return type and declare the parameters. 
int readNumbers(string fileName, int numbers[50], int maxNumbers)
{
	// TODO: Check and accomplish variable declarations: 
	int number;
	int nNumbers;
	int fileNo;

	nNumbers = 0;
	fileNo = StructorizerFileAPI::fileOpen(fileName);
	if (fileNo <= 0) {
		throw "File could not be opened!";
	}
	try {
		while (! StructorizerFileAPI::fileEOF(fileNo) && nNumbers < maxNumbers) {
			number = StructorizerFileAPI::fileReadInt(fileNo);
			numbers[nNumbers] = number;
			nNumbers = nNumbers + 1;
		}
	}
	catch(string error) {
		throw;
	}
// 	finally { 
		StructorizerFileAPI::fileClose(fileNo);
// 	} 
	return nNumbers;
}
// program ComputeSum 

// Computes the sum and average of the numbers read from a user-specified 
// text file (which might have been created via generateRandomNumberFile(4)). 
//  
// This program is part of an arrangement used to test group code export (issue 
// #828) with FileAPI dependency. 
// The input check loop has been disabled (replaced by a simple unchecked input 
// instruction) in order to test the effect of indirect FileAPI dependency (only the 
// called subroutine directly requires FileAPI now). 
int main(void)
{
	// TODO: Check and accomplish variable declarations: 
	??? values[50];
	double sum;
	int nValues;
	??? file_name;
	int fileNo;

	fileNo = 1000;
	// Disable this if you enable the loop below! 
	std::cout << "Name/path of the number file"; std::cin >> file_name;
	// If you enable this loop, then the preceding input instruction is to be disabled 
	// and the fileClose instruction in the alternative below is to be enabled. 
// 	do { 
// 		std::cout << "Name/path of the number file"; std::cin >> file_name; 
// 		fileNo = StructorizerFileAPI::fileOpen(file_name); 
// 	} while (! (fileNo > 0 || file_name == "")); 
	if (fileNo > 0) {
		// This should be enabled if the input check loop above gets enabled. 
// 		StructorizerFileAPI::fileClose(fileNo); 
		values[0] =;
		nValues = 0;
		try {
			nValues = readNumbers(file_name, values, 1000);
		}
		catch(string failure) {
			std::cout << failure << std::endl;
			exit(-7);
		}
		sum = 0.0;
		for (int k = 0; k <= nValues-1; k += (1)) {
			sum = sum + values[k];
		}
		std::cout << "sum = " << sum << std::endl;
		std::cout << "average = " << sum / nValues << std::endl;
	}

	return 0;
}
