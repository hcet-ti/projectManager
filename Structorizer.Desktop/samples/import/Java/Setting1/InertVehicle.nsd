<?xml version="1.0" encoding="UTF-8"?>
<root xmlns:nsd="https://structorizer.fisch.lu" version="3.31-02" preCase="case" preRepeat="until" postFor="to" preReturn="return" postForIn="in" preWhile="while" output="OUTPUT" input="INPUT" preAlt="if" preFor="for" preExit="exit" preLeave="leave" ignoreCase="true" preThrow="throw" preForIn="foreach" stepFor="step" namespace="de.fhe.traffic" author="Kay Gürtzig" created="2021-03-06" changedby="Kay Gürtzig" changed="2021-03-06" origin="Structorizer 3.31-02 / JavaParser: &#34;D:\workspace\kay\JavaImportDemo\src\de\fhe\traffic\InertVehicle.java&#34;" licenseName="GPLv3-link" license="GNU General Public License (V 3)&#10;https://www.gnu.org/licenses/gpl.html&#10;http://www.gnu.de/documents/gpl.de.html&#10;" text="&#34;InertVehicle&#34;" comment="&#34;CLASS&#34;,&#34;*&#34;,&#34; * Class simulating a friction-free vehicle moving along a straight axis with&#34;,&#34; * constant speed.&#34;,&#34; * @author codemanyak&#34;,&#34;==== package: de.fhe.traffic&#34;,&#34;public class&#34;" color="ffffff" type="includable" style="nice">
	<children>
		<instruction text="&#34;type LengthUnit = enum{MILLIMETRE, CENTIMETRE, INCH, DECIMETRE, FOOT, YARD, METRE, KILOMETRE, MILE}&#34;" comment="&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;public&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
		<instruction text="&#34;type SpeedUnit = enum{METRESPERSECOND, KILOMETRESPERHOUR, MILESPERHOUR}&#34;" comment="&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;&#34;,&#34;public&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
		<instruction text="&#34;var LENGTH2METRE: array of double &#60;- {0.001, 0.01, 0.0254, 0.1, 0.3048, 0.9144, 1.0, 1000.0, 1609.344}&#34;" comment="&#34;* The factor to multiply with a length in given {@link LengthUnit} to obtain it in metres &#34;,&#34;FIELD in class de.fhe.traffic.InertVehicle&#34;,&#34;private static&#34;" color="e0ffff" rotated="0" disabled="0"></instruction>
		<instruction text="&#34;var SPEED2MPS: array of double &#60;- {1.0, 1 / 3.6, 0.44704}&#34;" comment="&#34;&#34;,&#34;FIELD in class de.fhe.traffic.InertVehicle&#34;,&#34;private static&#34;" color="e0ffff" rotated="0" disabled="0"></instruction>
		<instruction text="&#34;var lastPosition: double &#60;- 0&#34;" comment="&#34;* Position at last speed change in metres &#34;,&#34;FIELD in class de.fhe.traffic.InertVehicle&#34;,&#34;private&#34;" color="e0ffff" rotated="0" disabled="0"></instruction>
		<instruction text="&#34;var speed: double &#60;- 0&#34;" comment="&#34;* Speed in m/s &#34;,&#34;FIELD in class de.fhe.traffic.InertVehicle&#34;,&#34;private&#34;" color="e0ffff" rotated="0" disabled="0"></instruction>
		<instruction text="&#34;var lastTime: long&#34;" comment="&#34;* Time of last speed change in ms &#34;,&#34;FIELD in class de.fhe.traffic.InertVehicle&#34;,&#34;private&#34;" color="e0ffff" rotated="0" disabled="0"></instruction>
		<call text="&#34;InertVehicle()&#34;" comment="&#34;*&#34;,&#34;  * Creates a new InertVehicle at position 0 with zero speed and current time&#34;,&#34;CONSTRUCTOR for class de.fhe.traffic.InertVehicle&#34;,&#34;public&#34;" color="e0ffe0" disabled="1" ismethoddecl="1"></call>
		<call text="&#34;InertVehicle(startPos: double; unit: LengthUnit)&#34;" comment="&#34;*&#34;,&#34;  * Creates a new InertVehicle at the give start position {@code startPos} with&#34;,&#34;  * zero speed and current time&#34;,&#34;  * @param startPos - initial position along the moving axis in the given {@code unit}&#34;,&#34;  * @param unit - the {@link LengthUnit} {@code startPos} is given in&#34;,&#34;CONSTRUCTOR for class de.fhe.traffic.InertVehicle&#34;,&#34;public&#34;" color="e0ffe0" disabled="1" ismethoddecl="1"></call>
		<call text="&#34;getPosition(unit: LengthUnit): double&#34;" comment="&#34;*&#34;,&#34;  * Computes the momentary position of this vehicle along the axis in the requested&#34;,&#34;  * {@code unit}&#34;,&#34;  * @param unit - the requested length unit, e.g. {@link LengthUnit#KILOMETRE}&#34;,&#34;  * @return the current position of the vehicle along the way&#34;,&#34;METHOD for class de.fhe.traffic.InertVehicle&#34;,&#34;public&#34;" color="e0ffe0" disabled="1" ismethoddecl="1"></call>
		<call text="&#34;getSpeed(unit: SpeedUnit): double&#34;" comment="&#34;*&#34;,&#34;  * Returns the current speed of the vehicle in the requested speed {@code unit}&#34;,&#34;  * @param unit - the requested speed unit, e.g. {@link SpeedUnit#METRESPERSECOND}&#34;,&#34;  * @return the current speed&#34;,&#34;METHOD for class de.fhe.traffic.InertVehicle&#34;,&#34;public&#34;" color="e0ffe0" disabled="1" ismethoddecl="1"></call>
		<call text="&#34;setSpeed(newSpeed: double; unit: SpeedUnit)&#34;" comment="&#34;*&#34;,&#34;  * Sets the speed to the given {@code newSpeed}&#34;,&#34;  * @param newSpeed - the new speed to be imposed in the given {@code unit}&#34;,&#34;  * @param unit - the speed unit the {@code newSpeed} is given in&#34;,&#34;METHOD for class de.fhe.traffic.InertVehicle&#34;,&#34;public&#34;" color="e0ffe0" disabled="1" ismethoddecl="1"></call>
	</children>
</root>